{
	"info": {
      "_postman_id": "ac3f3a65-32c8-441c-9b07-96be598eb235",
      "name": "Saxon",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
	"item": [
		{
			"name": "Security",
			"item": [
				{
					"name": "Available system properties and environment variables",
					"event": [
						{
							"listen": "test",
							"script": {
                              "id": "2a796015-80f5-400e-bee8-fcdeddbb76a8",
                              "exec": [
                                "const res = pm.response;\r",
                                "\r",
                                "pm.test(\"Response code should be 400\", () => pm.expect(res.to.have.status(400)));\r",
                                "pm.test(\"The response body should contain a JSON object\", () => pm.expect(res.json()).to.be.an(\"object\"));\r",
                                "pm.test(\"The response body should have a status code, an exception type and a message\", () => {\r",
                                "    pm.expect(res.json()).to.contain.all.keys([\"message\", \"statusCode\", \"exceptionType\"]);\r",
                                "});"
                              ],
                              "type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "xml",
									"type": "file",
									"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/dummy.xml"
								},
								{
									"key": "xsl",
									"type": "file",
									"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/test-syntax-error.xsl"
								}
							]
						},
						"url": {
							"raw": "{{url}}/transform",
							"host": [
								"{{url}}"
							],
							"path": [
								"transform"
							]
						}
					},
					"response": []
				},
				{
					"name": "xsl:result-document",
					"event": [
						{
							"listen": "test",
							"script": {
                              "id": "3b2afe9d-844a-4b3b-9d95-a7add7671959",
                              "exec": [
                                "const res = pm.response;\r",
                                "\r",
                                "pm.test(\"Response code should be 400\", () => pm.expect(res.to.have.status(400)));\r",
                                "pm.test(\"The response body should contain a JSON object\", () => pm.expect(res.json()).to.be.an(\"object\"));\r",
                                "pm.test(\"The response body should have a status code, an exception type and a message\", () => {\r",
                                "    pm.expect(res.json()).to.contain.all.keys([\"message\", \"statusCode\", \"exceptionType\"]);\r",
                                "});"
                              ],
                              "type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "xml",
									"type": "file",
									"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/dummy.xml"
								},
								{
									"key": "xsl",
									"type": "file",
									"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/test-result-document.xsl"
								}
							]
						},
						"url": {
							"raw": "{{url}}/transform",
							"host": [
								"{{url}}"
							],
							"path": [
								"transform"
							]
						}
					},
					"response": []
				},
				{
					"name": "URL resolving",
					"event": [
						{
							"listen": "test",
							"script": {
                              "id": "757f9585-77aa-4142-a4ae-bdcbb8fcdd2c",
                              "exec": [
                                "const res = pm.response;\r",
                                "\r",
                                "pm.test(\"Response code should be 200\", () => pm.expect(res.to.have.status(200)));\r",
                                "pm.test(\"All functions should have thrown an error\", () => {\r",
                                "    pm.expect(Object.keys(res.json()).map(k => res.json()[k])).to.all.match(/^err/);\r",
                                "});"
                              ],
                              "type": "text/javascript"
                            }
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "xml",
									"type": "file",
									"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/dummy.xml"
								},
								{
									"key": "xsl",
									"type": "file",
									"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/test-uri-resolver.xsl"
								}
							]
						},
						"url": {
							"raw": "{{url}}/transform",
							"host": [
								"{{url}}"
							],
							"path": [
								"transform"
							]
						}
					},
					"response": []
				},
				{
					"name": "Doctype",
					"event": [
						{
							"listen": "test",
							"script": {
                              "id": "ddcd5a62-da44-4762-8695-1d0fa69efae7",
                              "exec": [
                                "const res = pm.response;\r",
                                "\r",
                                "pm.test(\"Response code should be 400\", () => pm.expect(res.to.have.status(400)));\r",
                                "pm.test(\"The response body should contain a JSON object\", () => pm.expect(res.json()).to.be.an(\"object\"));\r",
                                "pm.test(\"The response body should have a status code, an exception type and a message\", () => {\r",
                                "    pm.expect(res.json()).to.contain.all.keys([\"message\", \"statusCode\", \"exceptionType\"]);\r",
                                "});"
                              ],
                              "type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "xml",
									"type": "file",
									"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/dummy.xml"
								},
								{
									"key": "xsl",
									"type": "file",
									"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/test-dtd.xsl"
								}
							]
						},
						"url": {
							"raw": "{{url}}/transform",
							"host": [
								"{{url}}"
							],
							"path": [
								"transform"
							]
						}
					},
					"response": []
				},
				{
					"name": "Document-function",
					"event": [
						{
							"listen": "test",
							"script": {
                              "id": "9789a01f-51a9-49e5-8208-a3be5e72174c",
                              "exec": [
                                "const res = pm.response;\r",
                                "\r",
                                "pm.test(\"Response code should be 400\", () => pm.expect(res.to.have.status(400)));\r",
                                "pm.test(\"The response body should contain a JSON object\", () => pm.expect(res.json()).to.be.an(\"object\"));\r",
                                "pm.test(\"The response body should have a status code, an exception type and a message\", () => {\r",
                                "    pm.expect(res.json()).to.contain.all.keys([\"message\", \"statusCode\", \"exceptionType\"]);\r",
                                "});"
                              ],
                              "type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "xml",
									"type": "file",
									"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/dummy.xml"
								},
								{
									"key": "xsl",
									"type": "file",
									"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/test-document-fn.xsl"
								}
							]
						},
						"url": {
							"raw": "{{url}}/transform",
							"host": [
								"{{url}}"
							],
							"path": [
								"transform"
							]
						}
					},
					"response": []
				},
				{
					"name": "Server header",
					"event": [
						{
							"listen": "test",
							"script": {
                              "id": "f5fc1234-9326-4319-99bb-26957168b9da",
                              "exec": [
                                "const res = pm.response;\r",
                                "\r",
                                "pm.test(\"Server header should not include Jetty\", () => pm.expect(res.headers.get(\"Server\")).not.to.match(/jetty/i));"
                              ],
                              "type": "text/javascript"
                            }
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "XQuery",
			"item": [
				{
					"name": "XQuery",
					"event": [
						{
							"listen": "test",
							"script": {
                              "id": "7aefd13a-4ffd-4173-8031-22966cac76c8",
                              "exec": [
                                "const res = pm.response;\r",
                                "\r",
                                "pm.test(\"Response code should be 200\", () => pm.expect(res.to.have.status(200)));\r",
                                "pm.test(\"The response body should be 'abc'\", () => pm.expect(res.text()).to.equal(\"abc\"));\r",
                                ""
                              ],
                              "type": "text/javascript"
                            }
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "xml",
									"type": "file",
									"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/dummy.xml"
								},
								{
									"key": "xsl",
									"type": "file",
									"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/abc.xquery"
								}
							]
						},
						"url": {
							"raw": "{{url}}/query",
							"host": [
								"{{url}}"
							],
							"path": [
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "XQuery - JSON",
					"event": [
						{
							"listen": "test",
							"script": {
                              "id": "3110b381-8e90-414e-9820-d7a4e64c1d91",
                              "exec": [
                                "const res = pm.response;\r",
                                "\r",
                                "pm.test(\"Response code should be 200\", () => pm.expect(res.to.have.status(200)));\r",
                                "pm.test(\"The response body should have a json key 'a'\", () => pm.expect(res.json()).to.have.keys(\"a\"))\r",
                                ""
                              ],
                              "type": "text/javascript"
                            }
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "xml",
									"type": "file",
									"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/dummy.xml"
								},
								{
									"key": "xsl",
									"type": "file",
									"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/hof.xquery"
								}
							]
						},
						"url": {
							"raw": "{{url}}/query",
							"host": [
								"{{url}}"
							],
							"path": [
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "XQuery - Syntax Error",
					"event": [
						{
							"listen": "test",
							"script": {
                              "id": "0c119ca4-7b8b-45e6-9431-3dfc4c484e26",
                              "exec": [
                                "const res = pm.response;\r",
                                "\r",
                                "pm.test(\"Response code should be 400\", () => pm.expect(res.to.have.status(400)));\r",
                                "pm.test(\"The response body should have a status code, an exception type and a message\", () => {\r",
                                "    pm.expect(res.json()).to.contain.all.keys([\"message\", \"statusCode\", \"exceptionType\"]);\r",
                                "});"
                              ],
                              "type": "text/javascript"
                            }
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "xml",
									"type": "file",
									"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/dummy.xml"
								},
								{
									"key": "xsl",
									"type": "file",
									"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/syntax-error.xquery"
								}
							]
						},
						"url": {
							"raw": "{{url}}/query",
							"host": [
								"{{url}}"
							],
							"path": [
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "XQuery - Error function",
					"event": [
						{
							"listen": "test",
							"script": {
                              "id": "644660ab-4885-4c7a-9efa-3386921ec9a9",
                              "exec": [
                                "const res = pm.response;\r",
                                "\r",
                                "pm.test(\"Response code should be 400\", () => pm.expect(res.to.have.status(400)));\r",
                                "pm.test(\"The response body should have a status code, an exception type and a message\", () => {\r",
                                "    pm.expect(res.json()).to.contain.all.keys([\"message\", \"statusCode\", \"exceptionType\"]);\r",
                                "});\r",
                                "pm.test(\"Error message should be :-(\", () => pm.expect(res.json()[\"message\"]).to.equal(\":-(\"))"
                              ],
                              "type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "xml",
									"type": "file",
									"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/dummy.xml"
								},
								{
									"key": "xsl",
									"type": "file",
									"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/error.xquery"
								}
							]
						},
						"url": {
                          "raw": "{{url}}/query",
                          "host": [
                            "{{url}}"
                          ],
                          "path": [
                            "query"
                          ]
                        }
                    },
                  "response": []
                },
              {
                "name": "XQuery without input XML",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6d9e4be0-7358-4767-8fc1-94c26cb70073",
                      "exec": [
                        "const res = pm.response;\r",
                        "\r",
                        "pm.test(\"Response code should be 200\", () => pm.expect(res.to.have.status(200)));\r",
                        "pm.test(\"Response should contain the result as defined in the query\", () => pm.expect(res.json()).to.deep.equal({\"a\": \"abc\"}))"
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "request": {
                  "method": "POST",
                  "header": [],
                  "body": {
                    "mode": "formdata",
                    "formdata": [
                      {
                        "key": "xsl",
                        "type": "file",
                        "src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/hof.xquery"
                      }
                    ]
                  },
                  "url": {
                    "raw": "{{url}}/query",
                    "host": [
                      "{{url}}"
                    ],
                    "path": [
                      "query"
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "JSON as input",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4fc140a1-afa6-42fa-bf3a-5a69b4e2c3ff",
                      "exec": [
                        "const res = pm.response;\r",
                        "\r",
                        "pm.test(\"Response code should be 200\", () => pm.expect(res.to.have.status(200)));\r",
                        "pm.test(\"The response body should contain a JSON object\", () => pm.expect(res.json()).to.be.an(\"object\"));\r",
                        "pm.test(\"The content-type should be application/json\", () => pm.expect(res.headers.get(\"Content-Type\")).to.include(\"application/json\"));\r",
                        "pm.test(\"The response object should have key a with value b\", () => pm.expect(res.json()).to.deep.equal({\"a\": \"b\"}))\r",
                        ""
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "request": {
                  "method": "POST",
                  "header": [],
                  "body": {
                    "mode": "formdata",
                    "formdata": [
                      {
                        "key": "xsl",
                        "value": "xml-to-json(.)",
                        "type": "text"
                      },
                      {
                        "key": "xml",
                        "value": "{\"a\": \"b\"}",
                        "type": "text"
                      },
                      {
                        "key": "output",
                        "value": "method=text;media-type=application/json",
                        "type": "text"
                      }
                    ]
                  },
                  "url": {
                    "raw": "{{url}}/query",
                    "host": [
                      "{{url}}"
                    ],
                    "path": [
                      "query"
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "Parameters",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c1974d0e-4c9d-4778-ac9d-e7707e38631a",
                      "exec": [
                        "const res = pm.response;\r",
                        "\r",
                        "pm.test(\"Response code should be 200\", () => pm.expect(res.to.have.status(200)));\r",
                        "pm.test(\"The response body should be 'someText'\", () => pm.expect(res.text()).to.equal(\"someText\"));\r",
                        ""
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "request": {
                  "method": "POST",
                  "header": [],
                  "body": {
                    "mode": "formdata",
                    "formdata": [
                      {
                        "key": "xsl",
                        "value": "declare variable $myParam external; $myParam",
                        "type": "text"
                      },
                      {
                        "key": "parameters",
                        "value": "myParam=someText",
                        "type": "text"
                      },
                      {
                        "key": "output",
                        "value": "method=text",
                        "type": "text"
                      }
                    ]
                  },
                  "url": {
                    "raw": "{{url}}/query",
                    "host": [
                      "{{url}}"
                    ],
                    "path": [
                      "query"
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "Serialization parameters",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "62a3659b-0c67-4364-95af-3ab9dedae8d2",
                      "exec": [
                        "const res = pm.response;\r",
                        "\r",
                        "pm.test(\"Response code should be 200\", () => pm.expect(res.to.have.status(200)));\r",
                        "pm.test(\"The response body should contain a JSON object\", () => pm.expect(res.json()).to.be.an(\"object\"));\r",
                        "pm.test(\"The content-type should be application/json\", () => pm.expect(res.headers.get(\"Content-Type\")).to.include(\"application/json\"));\r",
                        "pm.test(\"The response object should have key a with value b\", () => pm.expect(res.json()).to.deep.equal({\"a\": \"b\"}))\r",
                        ""
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "request": {
                  "method": "POST",
                  "header": [],
                  "body": {
                    "mode": "formdata",
                    "formdata": [
                      {
                        "key": "xsl",
                        "value": "declare option saxon:output \"method=xml\";map{'a': 'b'}",
                        "type": "text"
                      },
                      {
                        "key": "output",
                        "value": "method=json;media-type=application/json",
                        "type": "text"
                      }
                    ]
                  },
                  "url": {
                    "raw": "{{url}}/query",
                    "host": [
                      "{{url}}"
                    ],
                    "path": [
                      "query"
                    ]
                  }
                },
                "response": []
              }
            ],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Simple transformation",
			"event": [
				{
					"listen": "test",
					"script": {
                      "id": "b4d1268d-f248-44cc-8da1-85ecd779faa6",
                      "exec": [
                        "const res = pm.response;\r",
                        "\r",
                        "pm.test(\"Response code should be 200\", () => pm.expect(res.to.have.status(200)));\r",
                        "pm.test(\"The response body should be 'abc'\", () => pm.expect(res.text()).to.equal(\"abc\"));\r",
                        ""
                      ],
                      "type": "text/javascript"
                    }
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "xml",
							"type": "file",
							"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/dummy.xml"
						},
						{
							"key": "xsl",
							"type": "file",
							"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/test-1.xsl"
						}
					]
				},
				"url": {
					"raw": "{{url}}/transform",
					"host": [
						"{{url}}"
					],
					"path": [
						"transform"
					]
				}
			},
			"response": []
		},
      {
        "name": "Global context variables",
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "2c73560a-50d8-42f9-be90-f2383796368c",
              "exec": [
                "const res = pm.response;\r",
                "pm.test(\"Response code should be 200\", () => pm.expect(res.to.have.status(200)));\r",
                "pm.test(\"Response should equal 1\", () => pm.expect(res.text()).to.equal(\"1\"));\r",
                ""
              ],
              "type": "text/javascript"
            }
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "xml",
							"type": "file",
							"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/dummy.xml"
						},
                      {
                        "key": "xsl",
                        "type": "file",
                        "src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/test-global-variable.xsl"
                      }
					]
				},
				"url": {
					"raw": "{{url}}/transform",
					"host": [
						"{{url}}"
					],
					"path": [
						"transform"
					]
				}
			},
			"response": []
		},
		{
			"name": "Compiled transformation",
			"event": [
				{
					"listen": "test",
					"script": {
                      "id": "6aa29153-4a1e-44aa-b86f-32b6004003c4",
                      "exec": [
                        "const res = pm.response;\r",
                        "\r",
                        "pm.test(\"Response code should be 200\", () => pm.expect(res.to.have.status(200)));\r",
                        "pm.test(\"The response body should be 'abc'\", () => pm.expect(res.text()).to.equal(\"abc\"));\r",
                        ""
                      ],
                      "type": "text/javascript"
                    }
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "xml",
							"type": "file",
							"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/dummy.xml"
						},
						{
							"key": "xsl",
							"type": "file",
							"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/test-1.sef"
						}
					]
				},
				"url": {
					"raw": "{{url}}/transform",
					"host": [
						"{{url}}"
					],
					"path": [
						"transform"
					]
				}
			},
			"response": []
		},
		{
			"name": "Simple transformation using Gzip",
			"event": [
				{
					"listen": "test",
					"script": {
                      "id": "98104501-582a-40db-82c5-d95d07eb3c6a",
                      "exec": [
                        "const res = pm.response;\r",
                        "\r",
                        "pm.test(\"Response code should be 200\", () => pm.expect(res.to.have.status(200)));\r",
                        "pm.test(\"The response body should be 'abc'\", () => pm.expect(res.text()).to.equal(\"abc\"));\r",
                        ""
                      ],
                      "type": "text/javascript"
                    }
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
                      {
                        "key": "xml",
                        "type": "file",
                        "src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/dummy.xml.gz"
                      },
                      {
                        "key": "xsl",
                        "type": "file",
                        "src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/test-1.xsl.gz"
                      }
					]
				},
				"url": {
					"raw": "{{url}}/transform",
					"host": [
						"{{url}}"
					],
					"path": [
						"transform"
					]
				}
			},
			"response": []
		},
		{
			"name": "Simple transformation in iso-8859-15",
			"event": [
				{
					"listen": "test",
					"script": {
                      "id": "a2795407-0a6a-45f7-9341-e99672582511",
                      "exec": [
                        "const res = pm.response;\r",
                        "\r",
                        "pm.test(\"Response code should be 200\", () => pm.expect(res.to.have.status(200)));\r",
                        "pm.test(\"The response body should be 'é'\", () => pm.expect(res.text()).to.equal(\"é\"));\r",
                        "pm.test(\"The response character set should be detected as iso-8859-15\", () => pm.expect(res.headers.get(\"Content-Type\")).to.match(/iso-8859/i))"
                      ],
                      "type": "text/javascript"
                    }
				}
			],
			"request": {
              "method": "POST",
              "header": [
                {
                  "key": "Accept",
                  "value": "application/octet-stream",
                  "type": "text"
                }
              ],
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "xml",
                    "type": "file",
                    "src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/dummy.xml"
                  },
                  {
                    "key": "xsl",
							"type": "file",
							"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/test-iso-8859-15.xsl"
						}
					]
				},
				"url": {
					"raw": "{{url}}/transform",
					"host": [
						"{{url}}"
					],
					"path": [
						"transform"
					]
				}
			},
			"response": []
		},
		{
			"name": "Wrong URL",
			"event": [
				{
					"listen": "test",
					"script": {
                      "id": "c8db4699-287f-43be-a591-29b42fefb5c1",
                      "exec": [
                        "const res = pm.response;\r",
                        "pm.test(\"Response code should be 4XX\", () => pm.expect(res.code).to.be.gte(400));"
                      ],
                      "type": "text/javascript"
                    }
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "xml",
							"type": "file",
							"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/dummy.xml"
						},
						{
							"key": "xsl",
							"type": "file",
							"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/test-iso-8859-15.xsl"
						}
					]
				},
				"url": {
					"raw": "{{url}}/abc",
					"host": [
						"{{url}}"
					],
					"path": [
						"abc"
					]
				}
			},
			"response": []
		},
		{
			"name": "XSLT syntax error",
			"event": [
				{
					"listen": "test",
					"script": {
                      "id": "3ec0c9ef-9620-4aed-9635-f760e34c3cd7",
                      "exec": [
                        "const res = pm.response;\r",
                        "\r",
                        "pm.test(\"Response code should be 400\", () => pm.expect(res.to.have.status(400)));\r",
                        "pm.test(\"The response body should contain a JSON object\", () => pm.expect(res.json()).to.be.an(\"object\"));\r",
                        "pm.test(\"The response body should have a status code, an exception type and a message\", () => {\r",
                        "    pm.expect(res.json()).to.contain.all.keys([\"message\", \"statusCode\", \"exceptionType\"]);\r",
                        "});\r",
                        "pm.test(\"The error message must contain the parsing error description\", () => pm.expect(res.json().message).to.contain(\"Element type \\\"xsl:template\\\" must be followed by either attribute specifications\"))"
                      ],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "xml",
							"type": "file",
							"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/dummy.xml"
						},
						{
							"key": "xsl",
							"type": "file",
							"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/test-syntax-error.xsl"
						}
					]
				},
				"url": {
                  "raw": "{{url}}/transform",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "transform"
                  ]
                }
			},
			"response": []
		},
		{
			"name": "Compilation error",
			"event": [
				{
					"listen": "test",
					"script": {
                      "id": "f23541fa-3dd1-4d60-b62a-200a528d5d7e",
                      "exec": [
                        "const res = pm.response;\r",
                        "\r",
                        "pm.test(\"Response code should be 400\", () => pm.expect(res.to.have.status(400)));\r",
                        "pm.test(\"The response body should contain a JSON object\", () => pm.expect(res.json()).to.be.an(\"object\"));\r",
                        "pm.test(\"The response body should have a status code, an exception type and a message\", () => {\r",
                        "    pm.expect(res.json()).to.contain.all.keys([\"message\", \"statusCode\", \"exceptionType\"]);\r",
                        "});\r",
                        "pm.test(\"The message should contain 'compilation error'\", () => pm.expect(res.json()[\"message\"].toLowerCase()).to.contain(\"compilation error\"))"
                      ],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "xml",
							"type": "file",
							"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/dummy.xml"
						},
						{
							"key": "xsl",
							"type": "file",
							"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/test-compilation-error.xsl"
						}
					]
				},
				"url": {
					"raw": "{{url}}/transform",
					"host": [
						"{{url}}"
					],
					"path": [
						"transform"
					]
				}
			},
			"response": []
		},
		{
			"name": "Compilation error without location",
			"event": [
				{
					"listen": "test",
					"script": {
                      "id": "cc3d3b9f-aa45-43a8-9296-f4b67b794ce8",
                      "exec": [
                        "const res = pm.response;\r",
                        "\r",
                        "pm.test(\"Response code should be 400\", () => pm.expect(res.to.have.status(400)));\r",
                        "pm.test(\"The response body should contain a JSON object\", () => pm.expect(res.json()).to.be.an(\"object\"));\r",
                        "pm.test(\"The response body should have a status code, an exception type and a message\", () => {\r",
                        "    pm.expect(res.json()).to.contain.all.keys([\"message\", \"statusCode\", \"exceptionType\"]);\r",
                        "});"
                      ],
                      "type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "xml",
							"type": "file",
							"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/dummy.xml"
						},
						{
							"key": "xsl",
							"value": "<xsl:template xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"/>",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/transform",
					"host": [
						"{{url}}"
					],
					"path": [
						"transform"
					]
				}
			},
			"response": []
		},
		{
			"name": "Missing key 'xml'",
			"event": [
				{
					"listen": "test",
					"script": {
                      "id": "a4a1cecb-0ebc-47e8-920d-b7ddfcc75cdc",
                      "exec": [
                        "const res = pm.response;\r",
                        "\r",
                        "pm.test(\"Response code should be 400\", () => pm.expect(res.to.have.status(400)));\r",
                        "pm.test(\"The response body should contain a JSON object\", () => pm.expect(res.json()).to.be.an(\"object\"));\r",
                        "pm.test(\"The response body should have a status code, an exception type and a message\", () => {\r",
                        "    pm.expect(res.json()).to.contain.all.keys([\"message\", \"statusCode\", \"exceptionType\"]);\r",
                        "});"
                      ],
                      "type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "xml",
							"type": "file",
							"src": [],
							"disabled": true
						},
						{
							"key": "xsl",
							"type": "file",
							"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/test-syntax-error.xsl"
						}
					]
				},
				"url": {
					"raw": "{{url}}/transform",
					"host": [
						"{{url}}"
					],
					"path": [
						"transform"
					]
				}
			},
			"response": []
		},
		{
			"name": "Missing key 'xsl'",
			"event": [
				{
					"listen": "test",
					"script": {
                      "id": "c52648dd-e669-4053-aea4-a4d211cc5c9e",
                      "exec": [
                        "const res = pm.response;\r",
                        "\r",
                        "pm.test(\"Response code should be 400\", () => pm.expect(res.to.have.status(400)));\r",
                        "pm.test(\"The response body should contain a JSON object\", () => pm.expect(res.json()).to.be.an(\"object\"));\r",
                        "pm.test(\"The response body should have a status code, an exception type and a message\", () => {\r",
                        "    pm.expect(res.json()).to.contain.all.keys([\"message\", \"statusCode\", \"exceptionType\"]);\r",
                        "});"
                      ],
                      "type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "xml",
							"type": "file",
							"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/dummy.xml"
						},
						{
							"key": "xsl",
							"type": "file",
							"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/test-syntax-error.xsl",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{url}}/transform",
					"host": [
						"{{url}}"
					],
					"path": [
						"transform"
					]
				}
			},
			"response": []
		},
		{
			"name": "No body",
			"event": [
				{
					"listen": "test",
					"script": {
                      "id": "9540a8c0-3867-4616-b0f1-242f7f67bf97",
                      "exec": [
                        "const res = pm.response;\r",
                        "\r",
                        "pm.test(\"Response code should be 400\", () => pm.expect(res.to.have.status(400)));\r",
                        "pm.test(\"The response body should contain a JSON object\", () => pm.expect(res.json()).to.be.an(\"object\"));\r",
                        "pm.test(\"The response body should have a status code, an exception type and a message\", () => {\r",
                        "    pm.expect(res.json()).to.contain.all.keys([\"message\", \"statusCode\", \"exceptionType\"]);\r",
                        "});"
                      ],
                      "type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{url}}/transform",
					"host": [
						"{{url}}"
					],
					"path": [
						"transform"
					]
				}
			},
			"response": []
		},
		{
			"name": "XSL form item is not a stylesheet",
			"event": [
				{
					"listen": "test",
					"script": {
                      "id": "16e72168-8756-44af-9474-1dc15847154e",
                      "exec": [
                        "const res = pm.response;\r",
                        "\r",
                        "pm.test(\"Response code should be 400\", () => pm.expect(res.to.have.status(400)));\r",
                        "pm.test(\"The response body should contain a JSON object\", () => pm.expect(res.json()).to.be.an(\"object\"));\r",
                        "pm.test(\"The response body should have a status code, an exception type and a message\", () => {\r",
                        "    pm.expect(res.json()).to.contain.all.keys([\"message\", \"statusCode\", \"exceptionType\"]);\r",
                        "});"
                      ],
                      "type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "xml",
							"type": "file",
							"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/dummy.xml"
						},
						{
							"key": "xsl",
							"type": "file",
							"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/text-file.txt"
						}
					]
				},
				"url": {
					"raw": "{{url}}/transform",
					"host": [
						"{{url}}"
					],
					"path": [
						"transform"
					]
				}
			},
			"response": []
		},
		{
			"name": "XSLT terminated by message",
			"event": [
				{
					"listen": "test",
					"script": {
                      "id": "bdfb4acc-f31d-4bc4-b762-2ba344ef7641",
                      "exec": [
                        "const res = pm.response;\r",
                        "\r",
                        "pm.test(\"Response code should be 400\", () => pm.expect(res.to.have.status(400)));\r",
                        "pm.test(\"The response body should contain a JSON object\", () => pm.expect(res.json()).to.be.an(\"object\"));\r",
                        "pm.test(\"The response body should have a status code, an exception type and a message\", () => {\r",
                        "    pm.expect(res.json()).to.contain.all.keys([\"message\", \"statusCode\", \"exceptionType\"]);\r",
                        "});\r",
                        "pm.test(\"The response body object should have a message equal to the XSLT message\", () => pm.expect(res.json()[\"message\"]).to.equal(\"terminated\"));"
                      ],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "xml",
							"type": "file",
							"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/dummy.xml"
						},
						{
							"key": "xsl",
							"type": "file",
							"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/test-message.xsl"
						}
					]
				},
				"url": {
					"raw": "{{url}}/transform",
					"host": [
						"{{url}}"
					],
					"path": [
						"transform"
					]
				}
			},
			"response": []
		},
		{
			"name": "Transformation with xsl:initial-template",
			"event": [
				{
					"listen": "test",
					"script": {
                      "id": "35124167-ddfb-49f0-a162-7480080a9fc4",
                      "exec": [
                        "const res = pm.response;\r",
                        "\r",
                        "pm.test(\"Response code should be 200\", () => pm.expect(res.to.have.status(200)));\r",
                        "pm.test(\"The response body should contain a string 'hello!'\", () => pm.expect(res.text()).to.equal(\"hello!\"));"
                      ],
                      "type": "text/javascript"
                    }
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "xsl",
							"type": "file",
							"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/test-initial-template.xsl"
						}
					]
				},
				"url": {
					"raw": "{{url}}/transform",
					"host": [
						"{{url}}"
					],
					"path": [
						"transform"
					]
				}
			},
			"response": []
		},
		{
			"name": "Transformation without xsl:initial-template and no XML",
			"event": [
				{
					"listen": "test",
					"script": {
                      "id": "4194cc0a-72e2-4643-9c91-2d58c1cc93ab",
                      "exec": [
                        "const res = pm.response;\r",
                        "\r",
                        "pm.test(\"Response code should be 400\", () => pm.expect(res.to.have.status(400)));\r",
                        "pm.test(\"The response body should contain a JSON object\", () => pm.expect(res.json()).to.be.an(\"object\"));\r",
                        "pm.test(\"The response body should have a status code, an exception type and a message\", () => {\r",
                        "    pm.expect(res.json()).to.contain.all.keys([\"message\", \"statusCode\", \"exceptionType\"]);\r",
                        "});"
                      ],
                      "type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "xsl",
							"type": "file",
							"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/test-1.xsl"
						}
					]
				},
				"url": {
					"raw": "{{url}}/transform",
					"host": [
						"{{url}}"
					],
					"path": [
						"transform"
					]
				}
			},
			"response": []
		},
		{
			"name": "Serialization parameters XSLT",
			"event": [
				{
					"listen": "test",
					"script": {
                      "id": "88eb4e01-81f9-4169-9813-9aff947ed83c",
                      "exec": [
                        "const res = pm.response;\r",
                        "\r",
                        "pm.test(\"Response code should be 200\", () => pm.expect(res.to.have.status(200)));\r",
                        "pm.test(\"The response body should contain a JSON object\", () => pm.expect(res.json()).to.be.an(\"object\"));\r",
                        "pm.test(\"The content-type should be application/json\", () => pm.expect(res.headers.get(\"Content-Type\")).to.include(\"application/json\"));\r",
                        "pm.test(\"The response object should have key a with value b\", () => pm.expect(res.json()).to.deep.equal({\"a\": \"b\"}))\r",
                        ""
                      ],
                      "type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "xsl",
							"value": "<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" version=\"3.0\">\n   <xsl:template name=\"xsl:initial-template\"><xsl:sequence select=\"map{'a': 'b'}\"/></xsl:template>\n</xsl:stylesheet>\n",
							"type": "text"
						},
						{
							"key": "output",
							"value": "method=json;media-type=application/json",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/transform",
					"host": [
						"{{url}}"
					],
					"path": [
						"transform"
					]
				}
			},
			"response": []
		},
		{
			"name": "Parameters XSLT",
			"event": [
				{
					"listen": "test",
					"script": {
                      "id": "64f7eb3d-a11e-4c2f-9f6a-fc7c17bcedd8",
                      "exec": [
                        "const res = pm.response;\r",
                        "\r",
                        "pm.test(\"Response code should be 200\", () => pm.expect(res.to.have.status(200)));\r",
                        "pm.test(\"The response body should be 'someText'\", () => pm.expect(res.text()).to.equal(\"someText\"));\r",
                        ""
                      ],
                      "type": "text/javascript"
                    }
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "xsl",
							"value": "<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" version=\"3.0\">\n    <xsl:output method=\"text\"/>   \n    <xsl:param name=\"myParam\"/>\n    <xsl:template name=\"xsl:initial-template\">\n      <xsl:value-of select=\"$myParam\"/>\n   </xsl:template>\n</xsl:stylesheet>\n",
							"type": "text"
						},
						{
							"key": "parameters",
							"value": "myParam=someText;otherParam=bla",
							"type": "text"
						},
						{
							"key": "output",
							"value": "method=text",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
                  "raw": "{{url}}/transform",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "transform"
                  ]
                }
			},
			"response": []
		},
		{
			"name": "JSON as input XSLT",
			"event": [
				{
					"listen": "test",
					"script": {
                      "id": "9c0abd7b-f52a-4e83-bcb5-cb496dd28da9",
                      "exec": [
                        "const res = pm.response;\r",
                        "\r",
                        "pm.test(\"Response code should be 200\", () => pm.expect(res.to.have.status(200)));\r",
                        "pm.test(\"The response body should contain a JSON object\", () => pm.expect(res.json()).to.be.an(\"object\"));\r",
                        "pm.test(\"The content-type should be application/json\", () => pm.expect(res.headers.get(\"Content-Type\")).to.include(\"application/json\"));\r",
                        "pm.test(\"The response object should have key a with value b\", () => pm.expect(res.json()).to.deep.equal({\"a\": \"b\"}))\r",
                        ""
                      ],
                      "type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
                      {
                        "key": "xsl",
                        "value": "<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" version=\"3.0\">\n   <xsl:output media-type=\"application/json\"  method=\"text\"/>\n   <xsl:template match=\"/\"><xsl:sequence select=\"xml-to-json(.)\"/></xsl:template>\n</xsl:stylesheet>\n",
                        "type": "text"
                      },
						{
							"key": "xml",
							"value": "{\"a\": \"b\"}",
							"type": "text"
						},
                      {
                        "key": "output",
                        "value": "method=text;media-type=application/json",
                        "type": "text",
                        "disabled": true
                      }
					]
				},
				"url": {
					"raw": "{{url}}/transform",
					"host": [
						"{{url}}"
					],
					"path": [
						"transform"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
              "id": "1dfce350-c206-4067-8c60-d45d563cdb8a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
		},
		{
			"listen": "test",
			"script": {
              "id": "b12e635e-7da5-4d76-8d1a-9b0112615f57",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
		}
	],
	"variable": [
		{
			"id": "25b91c52-31ed-4697-a881-a21879f078eb",
			"key": "url",
			"value": "localhost:5000"
		}
	],
	"protocolProfileBehavior": {}
}