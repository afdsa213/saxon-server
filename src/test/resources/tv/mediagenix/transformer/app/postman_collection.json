{
	"info": {
		"_postman_id": "c129152b-91f4-423c-bbcb-1f721a99a5b5",
		"name": "Saxon",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Security",
			"item": [
				{
					"name": "Available system properties and environment variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "86a35ffe-8f0c-42a0-a7b5-40c5ba2853bb",
								"exec": [
									"const res = pm.response;\r",
									"\r",
									"pm.test(\"Response code should be 400\", () => pm.expect(res.to.have.status(400)));\r",
									"pm.test(\"The response body should contain a JSON object\", () => pm.expect(res.json()).to.be.an(\"object\"));\r",
									"pm.test(\"The response body should have a status code, an exception type and a message\", () => {\r",
									"    pm.expect(res.json()).to.contain.all.keys([\"message\", \"statusCode\", \"exceptionType\"]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "xml",
									"type": "file",
									"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/dummy.xml"
								},
								{
									"key": "xsl",
									"type": "file",
									"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/test-syntax-error.xsl"
								}
							]
						},
						"url": {
							"raw": "{{url}}/transform",
							"host": [
								"{{url}}"
							],
							"path": [
								"transform"
							]
						}
					},
					"response": []
				},
				{
					"name": "xsl:result-document",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f405d7ab-ec18-40a7-a691-0502c30ded5a",
								"exec": [
									"const res = pm.response;\r",
									"\r",
									"pm.test(\"Response code should be 400\", () => pm.expect(res.to.have.status(400)));\r",
									"pm.test(\"The response body should contain a JSON object\", () => pm.expect(res.json()).to.be.an(\"object\"));\r",
									"pm.test(\"The response body should have a status code, an exception type and a message\", () => {\r",
									"    pm.expect(res.json()).to.contain.all.keys([\"message\", \"statusCode\", \"exceptionType\"]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "xml",
									"type": "file",
									"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/dummy.xml"
								},
								{
									"key": "xsl",
									"type": "file",
									"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/test-result-document.xsl"
								}
							]
						},
						"url": {
							"raw": "{{url}}/transform",
							"host": [
								"{{url}}"
							],
							"path": [
								"transform"
							]
						}
					},
					"response": []
				},
				{
					"name": "URL resolving",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ce926750-3baf-4540-950e-e405e2e05c4b",
								"exec": [
									"const res = pm.response;\r",
									"\r",
									"pm.test(\"Response code should be 200\", () => pm.expect(res.to.have.status(200)));\r",
									"pm.test(\"All functions should have thrown an error\", () => {\r",
									"    pm.expect(Object.keys(res.json()).map(k => res.json()[k])).to.all.match(/^err/);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "xml",
									"type": "file",
									"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/dummy.xml"
								},
								{
									"key": "xsl",
									"type": "file",
									"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/test-uri-resolver.xsl"
								}
							]
						},
						"url": {
							"raw": "{{url}}/transform",
							"host": [
								"{{url}}"
							],
							"path": [
								"transform"
							]
						}
					},
					"response": []
				},
				{
					"name": "Doctype",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0f3f87bc-fc81-4259-af85-600f9d1271ac",
								"exec": [
									"const res = pm.response;\r",
									"\r",
									"pm.test(\"Response code should be 400\", () => pm.expect(res.to.have.status(400)));\r",
									"pm.test(\"The response body should contain a JSON object\", () => pm.expect(res.json()).to.be.an(\"object\"));\r",
									"pm.test(\"The response body should have a status code, an exception type and a message\", () => {\r",
									"    pm.expect(res.json()).to.contain.all.keys([\"message\", \"statusCode\", \"exceptionType\"]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "xml",
									"type": "file",
									"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/dummy.xml"
								},
								{
									"key": "xsl",
									"type": "file",
									"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/test-dtd.xsl"
								}
							]
						},
						"url": {
							"raw": "{{url}}/transform",
							"host": [
								"{{url}}"
							],
							"path": [
								"transform"
							]
						}
					},
					"response": []
				},
				{
					"name": "Document-function",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0b6f2199-882c-41eb-85bb-4fade61cf8e8",
								"exec": [
									"const res = pm.response;\r",
									"\r",
									"pm.test(\"Response code should be 400\", () => pm.expect(res.to.have.status(400)));\r",
									"pm.test(\"The response body should contain a JSON object\", () => pm.expect(res.json()).to.be.an(\"object\"));\r",
									"pm.test(\"The response body should have a status code, an exception type and a message\", () => {\r",
									"    pm.expect(res.json()).to.contain.all.keys([\"message\", \"statusCode\", \"exceptionType\"]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "xml",
									"type": "file",
									"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/dummy.xml"
								},
								{
									"key": "xsl",
									"type": "file",
									"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/test-document-fn.xsl"
								}
							]
						},
						"url": {
							"raw": "{{url}}/transform",
							"host": [
								"{{url}}"
							],
							"path": [
								"transform"
							]
						}
					},
					"response": []
				},
				{
					"name": "Server header",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "df3cb8ad-77d7-46e7-83b3-e192e4fa5f7d",
								"exec": [
									"const res = pm.response;\r",
									"\r",
									"pm.test(\"Server header should not include Jetty\", () => pm.expect(res.headers.get(\"Server\")).not.to.match(/jetty/i));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "XQuery",
			"item": [
				{
					"name": "XQuery",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1cfe4b84-c081-41d0-b0c5-24ae0649ba94",
								"exec": [
									"const res = pm.response;\r",
									"\r",
									"pm.test(\"Response code should be 200\", () => pm.expect(res.to.have.status(200)));\r",
									"pm.test(\"The response body should be 'abc'\", () => pm.expect(res.text()).to.equal(\"abc\"));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "xml",
									"type": "file",
									"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/dummy.xml"
								},
								{
									"key": "xsl",
									"type": "file",
									"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/abc.xquery"
								}
							]
						},
						"url": {
							"raw": "{{url}}/query",
							"host": [
								"{{url}}"
							],
							"path": [
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "XQuery - JSON",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "299b2380-0194-4f63-9a33-fb5b139995b0",
								"exec": [
									"const res = pm.response;\r",
									"\r",
									"pm.test(\"Response code should be 200\", () => pm.expect(res.to.have.status(200)));\r",
									"pm.test(\"The response body should have a json key 'a'\", () => pm.expect(res.json()).to.have.keys(\"a\"))\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "xml",
									"type": "file",
									"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/dummy.xml"
								},
								{
									"key": "xsl",
									"type": "file",
									"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/hof.xquery"
								}
							]
						},
						"url": {
							"raw": "{{url}}/query",
							"host": [
								"{{url}}"
							],
							"path": [
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "XQuery - Syntax Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ce764a8-ef53-44e1-a8e8-04577206a58b",
								"exec": [
									"const res = pm.response;\r",
									"\r",
									"pm.test(\"Response code should be 400\", () => pm.expect(res.to.have.status(400)));\r",
									"pm.test(\"The response body should have a status code, an exception type and a message\", () => {\r",
									"    pm.expect(res.json()).to.contain.all.keys([\"message\", \"statusCode\", \"exceptionType\"]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "xml",
									"type": "file",
									"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/dummy.xml"
								},
								{
									"key": "xsl",
									"type": "file",
									"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/syntax-error.xquery"
								}
							]
						},
						"url": {
							"raw": "{{url}}/query",
							"host": [
								"{{url}}"
							],
							"path": [
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "XQuery - Error function",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd463698-b2cb-4f47-bff7-d41254902baf",
								"exec": [
									"const res = pm.response;\r",
									"\r",
									"pm.test(\"Response code should be 400\", () => pm.expect(res.to.have.status(400)));\r",
									"pm.test(\"The response body should have a status code, an exception type and a message\", () => {\r",
									"    pm.expect(res.json()).to.contain.all.keys([\"message\", \"statusCode\", \"exceptionType\"]);\r",
									"});\r",
									"pm.test(\"Error message should be :-(\", () => pm.expect(res.json()[\"message\"]).to.equal(\":-(\"))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "xml",
									"type": "file",
									"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/dummy.xml"
								},
								{
									"key": "xsl",
									"type": "file",
									"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/error.xquery"
								}
							]
						},
						"url": {
							"raw": "{{url}}/query",
							"host": [
								"{{url}}"
							],
							"path": [
								"query"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Simple transformation",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6ac88e68-61e2-45f5-968b-19d7cfa09871",
						"exec": [
							"const res = pm.response;\r",
							"\r",
							"pm.test(\"Response code should be 200\", () => pm.expect(res.to.have.status(200)));\r",
							"pm.test(\"The response body should be 'abc'\", () => pm.expect(res.text()).to.equal(\"abc\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "xml",
							"type": "file",
							"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/dummy.xml"
						},
						{
							"key": "xsl",
							"type": "file",
							"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/test-1.xsl"
						}
					]
				},
				"url": {
					"raw": "{{url}}/transform",
					"host": [
						"{{url}}"
					],
					"path": [
						"transform"
					]
				}
			},
			"response": []
		},
		{
			"name": "Package",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "01b940cc-a1ba-4c4b-8c3b-bb2daeee30bf",
						"exec": [
							"const res = pm.response;\r",
							"\r",
							"pm.test(\"Response code should be 200\", () => pm.expect(res.to.have.status(200)));\r",
							"pm.test(\"The response body should be 'abc'\", () => pm.expect(res.text()).to.equal(\"abc\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "xml",
							"type": "file",
							"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/dummy.xml"
						},
						{
							"key": "xsl",
							"type": "file",
							"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/test-1.xsl"
						}
					]
				},
				"url": {
					"raw": "{{url}}/transform",
					"host": [
						"{{url}}"
					],
					"path": [
						"transform"
					]
				}
			},
			"response": []
		},
		{
			"name": "Compiled transformation",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f259be7a-602f-44ef-b406-d49c4b1e8b77",
						"exec": [
							"const res = pm.response;\r",
							"\r",
							"pm.test(\"Response code should be 200\", () => pm.expect(res.to.have.status(200)));\r",
							"pm.test(\"The response body should be 'abc'\", () => pm.expect(res.text()).to.equal(\"abc\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "xml",
							"type": "file",
							"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/dummy.xml"
						},
						{
							"key": "xsl",
							"type": "file",
							"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/test-1.sef"
						}
					]
				},
				"url": {
					"raw": "{{url}}/transform",
					"host": [
						"{{url}}"
					],
					"path": [
						"transform"
					]
				}
			},
			"response": []
		},
		{
			"name": "Simple transformation using Gzip",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c9a36435-39c5-4eac-a66c-d605c441063e",
						"exec": [
							"const res = pm.response;\r",
							"\r",
							"pm.test(\"Response code should be 200\", () => pm.expect(res.to.have.status(200)));\r",
							"pm.test(\"The response body should be 'abc'\", () => pm.expect(res.text()).to.equal(\"abc\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "xml",
							"type": "file",
							"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/dummy.xml"
						},
						{
							"key": "xsl",
							"type": "file",
							"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/test-1.xsl"
						}
					]
				},
				"url": {
					"raw": "{{url}}/transform",
					"host": [
						"{{url}}"
					],
					"path": [
						"transform"
					]
				}
			},
			"response": []
		},
		{
			"name": "Simple transformation in iso-8859-15",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5fac28e2-fb12-4c5c-84aa-909992e7a497",
						"exec": [
							"const res = pm.response;\r",
							"\r",
							"pm.test(\"Response code should be 200\", () => pm.expect(res.to.have.status(200)));\r",
							"pm.test(\"The response body should be 'é'\", () => pm.expect(res.text()).to.equal(\"é\"));\r",
							"pm.test(\"The response character set should be detected as iso-8859-15\", () => pm.expect(res.headers.get(\"Content-Type\")).to.match(/iso-8859/))\r",
							"pm.test(\"Content-Type header includes the encoding of the stylesheet output\", () => pm.response.headers.find(h => h[\"key\"] == \"Content-Type\").value.includes(\"iso-8859-15\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "xml",
							"type": "file",
							"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/dummy.xml"
						},
						{
							"key": "xsl",
							"type": "file",
							"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/test-iso-8859-15.xsl"
						}
					]
				},
				"url": {
					"raw": "{{url}}/transform",
					"host": [
						"{{url}}"
					],
					"path": [
						"transform"
					]
				}
			},
			"response": []
		},
		{
			"name": "Wrong URL",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c6311a4a-3146-4706-bac7-f9163f3ce555",
						"exec": [
							"const res = pm.response;\r",
							"pm.test(\"Response code should be 404\", () => pm.expect(res.to.have.status(404)));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "xml",
							"type": "file",
							"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/dummy.xml"
						},
						{
							"key": "xsl",
							"type": "file",
							"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/test-iso-8859-15.xsl"
						}
					]
				},
				"url": {
					"raw": "{{url}}/abc",
					"host": [
						"{{url}}"
					],
					"path": [
						"abc"
					]
				}
			},
			"response": []
		},
		{
			"name": "XSLT syntax error",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3196939e-cdd1-46f0-9080-16a7fa2ab976",
						"exec": [
							"const res = pm.response;\r",
							"\r",
							"pm.test(\"Response code should be 400\", () => pm.expect(res.to.have.status(400)));\r",
							"pm.test(\"The response body should contain a JSON object\", () => pm.expect(res.json()).to.be.an(\"object\"));\r",
							"pm.test(\"The response body should have a status code, an exception type and a message\", () => {\r",
							"    pm.expect(res.json()).to.contain.all.keys([\"message\", \"statusCode\", \"exceptionType\"]);\r",
							"});\r",
							"pm.test(\"The error message must contain the parsing error description\", () => pm.expect(res.json().message).to.contain(\"Element type \\\"xsl:template\\\" must be followed by either attribute specifications\"))"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "xml",
							"type": "file",
							"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/dummy.xml"
						},
						{
							"key": "xsl",
							"type": "file",
							"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/test-syntax-error.xsl"
						}
					]
				},
				"url": {
					"raw": "https://{{url}}/transform",
					"host": [
						"{{url}}"
					],
					"path": [
						"transform"
					]
				}
			},
			"response": []
		},
		{
			"name": "Compilation error",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ec5466f7-03ce-465d-896d-e64d3d95ccbd",
						"exec": [
							"const res = pm.response;\r",
							"\r",
							"pm.test(\"Response code should be 400\", () => pm.expect(res.to.have.status(400)));\r",
							"pm.test(\"The response body should contain a JSON object\", () => pm.expect(res.json()).to.be.an(\"object\"));\r",
							"pm.test(\"The response body should have a status code, an exception type and a message\", () => {\r",
							"    pm.expect(res.json()).to.contain.all.keys([\"message\", \"statusCode\", \"exceptionType\"]);\r",
							"});\r",
							"pm.test(\"The message should contain 'compilation error'\", () => pm.expect(res.json()[\"message\"].toLowerCase()).to.contain(\"compilation error\"))"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "xml",
							"type": "file",
							"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/dummy.xml"
						},
						{
							"key": "xsl",
							"type": "file",
							"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/test-compilation-error.xsl"
						}
					]
				},
				"url": {
					"raw": "{{url}}/transform",
					"host": [
						"{{url}}"
					],
					"path": [
						"transform"
					]
				}
			},
			"response": []
		},
		{
			"name": "Compilation error without location",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "27c676f4-7d99-4b51-bd02-2e44faf0ffd1",
						"exec": [
							"const res = pm.response;\r",
							"\r",
							"pm.test(\"Response code should be 400\", () => pm.expect(res.to.have.status(400)));\r",
							"pm.test(\"The response body should contain a JSON object\", () => pm.expect(res.json()).to.be.an(\"object\"));\r",
							"pm.test(\"The response body should have a status code, an exception type and a message\", () => {\r",
							"    pm.expect(res.json()).to.contain.all.keys([\"message\", \"statusCode\", \"exceptionType\"]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "xml",
							"type": "file",
							"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/dummy.xml"
						},
						{
							"key": "xsl",
							"value": "<xsl:template xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"/>",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/transform",
					"host": [
						"{{url}}"
					],
					"path": [
						"transform"
					]
				}
			},
			"response": []
		},
		{
			"name": "Missing key 'xml'",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "abac13a3-2007-4fc1-9501-2052df4d7065",
						"exec": [
							"const res = pm.response;\r",
							"\r",
							"pm.test(\"Response code should be 400\", () => pm.expect(res.to.have.status(400)));\r",
							"pm.test(\"The response body should contain a JSON object\", () => pm.expect(res.json()).to.be.an(\"object\"));\r",
							"pm.test(\"The response body should have a status code, an exception type and a message\", () => {\r",
							"    pm.expect(res.json()).to.contain.all.keys([\"message\", \"statusCode\", \"exceptionType\"]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "xml",
							"type": "file",
							"src": [],
							"disabled": true
						},
						{
							"key": "xsl",
							"type": "file",
							"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/test-syntax-error.xsl"
						}
					]
				},
				"url": {
					"raw": "{{url}}/transform",
					"host": [
						"{{url}}"
					],
					"path": [
						"transform"
					]
				}
			},
			"response": []
		},
		{
			"name": "Missing key 'xsl'",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2c656697-b28a-4ce9-9b01-78c64ea41557",
						"exec": [
							"const res = pm.response;\r",
							"\r",
							"pm.test(\"Response code should be 400\", () => pm.expect(res.to.have.status(400)));\r",
							"pm.test(\"The response body should contain a JSON object\", () => pm.expect(res.json()).to.be.an(\"object\"));\r",
							"pm.test(\"The response body should have a status code, an exception type and a message\", () => {\r",
							"    pm.expect(res.json()).to.contain.all.keys([\"message\", \"statusCode\", \"exceptionType\"]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "xml",
							"type": "file",
							"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/dummy.xml"
						},
						{
							"key": "xsl",
							"type": "file",
							"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/test-syntax-error.xsl",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{url}}/transform",
					"host": [
						"{{url}}"
					],
					"path": [
						"transform"
					]
				}
			},
			"response": []
		},
		{
			"name": "No body",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1fe26151-6926-409f-bbcf-81ac2bb3bfb2",
						"exec": [
							"const res = pm.response;\r",
							"\r",
							"pm.test(\"Response code should be 400\", () => pm.expect(res.to.have.status(400)));\r",
							"pm.test(\"The response body should contain a JSON object\", () => pm.expect(res.json()).to.be.an(\"object\"));\r",
							"pm.test(\"The response body should have a status code, an exception type and a message\", () => {\r",
							"    pm.expect(res.json()).to.contain.all.keys([\"message\", \"statusCode\", \"exceptionType\"]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{url}}/transform",
					"host": [
						"{{url}}"
					],
					"path": [
						"transform"
					]
				}
			},
			"response": []
		},
		{
			"name": "XSL form item is not a stylesheet",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "831d39ed-4533-41c0-81a6-7ec0e36256b9",
						"exec": [
							"const res = pm.response;\r",
							"\r",
							"pm.test(\"Response code should be 400\", () => pm.expect(res.to.have.status(400)));\r",
							"pm.test(\"The response body should contain a JSON object\", () => pm.expect(res.json()).to.be.an(\"object\"));\r",
							"pm.test(\"The response body should have a status code, an exception type and a message\", () => {\r",
							"    pm.expect(res.json()).to.contain.all.keys([\"message\", \"statusCode\", \"exceptionType\"]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "xml",
							"type": "file",
							"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/dummy.xml"
						},
						{
							"key": "xsl",
							"type": "file",
							"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/text-file.txt"
						}
					]
				},
				"url": {
					"raw": "{{url}}/transform",
					"host": [
						"{{url}}"
					],
					"path": [
						"transform"
					]
				}
			},
			"response": []
		},
		{
			"name": "XSLT terminated by message",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "807b7cad-f0b2-434d-973d-5ea987e224a4",
						"exec": [
							"const res = pm.response;\r",
							"\r",
							"pm.test(\"Response code should be 400\", () => pm.expect(res.to.have.status(400)));\r",
							"pm.test(\"The response body should contain a JSON object\", () => pm.expect(res.json()).to.be.an(\"object\"));\r",
							"pm.test(\"The response body should have a status code, an exception type and a message\", () => {\r",
							"    pm.expect(res.json()).to.contain.all.keys([\"message\", \"statusCode\", \"exceptionType\"]);\r",
							"});\r",
							"pm.test(\"The response body object should have a message equal to the XSLT message\", () => pm.expect(res.json()[\"message\"]).to.equal(\"terminated\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "xml",
							"type": "file",
							"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/dummy.xml"
						},
						{
							"key": "xsl",
							"type": "file",
							"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/test-message.xsl"
						}
					]
				},
				"url": {
					"raw": "{{url}}/transform",
					"host": [
						"{{url}}"
					],
					"path": [
						"transform"
					]
				}
			},
			"response": []
		},
		{
			"name": "Transformation with xsl:initial-template",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6355e809-292e-4048-959a-5c770aede7a0",
						"exec": [
							"const res = pm.response;\r",
							"\r",
							"pm.test(\"Response code should be 200\", () => pm.expect(res.to.have.status(200)));\r",
							"pm.test(\"The response body should contain a string 'hello!'\", () => pm.expect(res.text()).to.equal(\"hello!\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "xsl",
							"type": "file",
							"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/test-initial-template.xsl"
						}
					]
				},
				"url": {
					"raw": "{{url}}/transform",
					"host": [
						"{{url}}"
					],
					"path": [
						"transform"
					]
				}
			},
			"response": []
		},
		{
			"name": "XQuery without input XML",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46b6c0e9-941f-4ad8-83f8-db3fbced2c13",
						"exec": [
							"const res = pm.response;\r",
							"\r",
							"pm.test(\"Response code should be 200\", () => pm.expect(res.to.have.status(200)));\r",
							"pm.test(\"Response should contain the result as defined in the query\", () => pm.expect(res.json()).to.deep.equal({\"a\": \"abc\"}))"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "xsl",
							"type": "file",
							"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/hof.xquery"
						}
					]
				},
				"url": {
					"raw": "{{url}}/query",
					"host": [
						"{{url}}"
					],
					"path": [
						"query"
					]
				}
			},
			"response": []
		},
		{
			"name": "Transformation without xsl:initial-template and no XML",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1f511508-bcf8-4ab4-bcae-732cd51a97a3",
						"exec": [
							"const res = pm.response;\r",
							"\r",
							"pm.test(\"Response code should be 400\", () => pm.expect(res.to.have.status(400)));\r",
							"pm.test(\"The response body should contain a JSON object\", () => pm.expect(res.json()).to.be.an(\"object\"));\r",
							"pm.test(\"The response body should have a status code, an exception type and a message\", () => {\r",
							"    pm.expect(res.json()).to.contain.all.keys([\"message\", \"statusCode\", \"exceptionType\"]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "xsl",
							"type": "file",
							"src": "/C:/Users/willem.van.lishout/Documents/Repositories/saxon-servlet/src/test/resources/tv/mediagenix/xslt/transformer/test-1.xsl"
						}
					]
				},
				"url": {
					"raw": "{{url}}/transform",
					"host": [
						"{{url}}"
					],
					"path": [
						"transform"
					]
				}
			},
			"response": []
		},
		{
			"name": "Serialization parameters",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3feec6a3-df96-4bc4-940f-f53b6940bfb2",
						"exec": [
							"const res = pm.response;\r",
							"\r",
							"pm.test(\"Response code should be 200\", () => pm.expect(res.to.have.status(200)));\r",
							"pm.test(\"The response body should contain a JSON object\", () => pm.expect(res.json()).to.be.an(\"object\"));\r",
							"pm.test(\"The content-type should be application/json\", () => pm.expect(res.headers.get(\"Content-Type\")).to.include(\"application/json\"));\r",
							"pm.test(\"The response object should have key a with value b\", () => pm.expect(res.json()).to.deep.equal({\"a\": \"b\"}))\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "xsl",
							"value": "declare option saxon:output \"method=xml\";map{'a': 'b'}",
							"type": "text"
						},
						{
							"key": "output",
							"value": "method=json;media-type=application/json",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/query",
					"host": [
						"{{url}}"
					],
					"path": [
						"query"
					]
				}
			},
			"response": []
		},
		{
			"name": "Serialization parameters XSLT",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "14040e85-940a-4f3d-844b-622e267e5ef5",
						"exec": [
							"const res = pm.response;\r",
							"\r",
							"pm.test(\"Response code should be 200\", () => pm.expect(res.to.have.status(200)));\r",
							"pm.test(\"The response body should contain a JSON object\", () => pm.expect(res.json()).to.be.an(\"object\"));\r",
							"pm.test(\"The content-type should be application/json\", () => pm.expect(res.headers.get(\"Content-Type\")).to.include(\"application/json\"));\r",
							"pm.test(\"The response object should have key a with value b\", () => pm.expect(res.json()).to.deep.equal({\"a\": \"b\"}))\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "xsl",
							"value": "<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" version=\"3.0\">\n   <xsl:template name=\"xsl:initial-template\"><xsl:sequence select=\"map{'a': 'b'}\"/></xsl:template>\n</xsl:stylesheet>\n",
							"type": "text"
						},
						{
							"key": "output",
							"value": "method=json;media-type=application/json",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/transform",
					"host": [
						"{{url}}"
					],
					"path": [
						"transform"
					]
				}
			},
			"response": []
		},
		{
			"name": "Parameters",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "aeed910c-f476-42a2-8dad-9561ae8418ec",
						"exec": [
							"const res = pm.response;\r",
							"\r",
							"pm.test(\"Response code should be 200\", () => pm.expect(res.to.have.status(200)));\r",
							"pm.test(\"The response body should be 'someText'\", () => pm.expect(res.text()).to.equal(\"someText\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "xsl",
							"value": "declare variable $myParam external; $myParam",
							"type": "text"
						},
						{
							"key": "parameters",
							"value": "myParam=someText",
							"type": "text"
						},
						{
							"key": "output",
							"value": "method=text",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/query",
					"host": [
						"{{url}}"
					],
					"path": [
						"query"
					]
				}
			},
			"response": []
		},
		{
			"name": "Parameters XSLT",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c80e0ee2-4fb4-4ab9-86db-653568b70aad",
						"exec": [
							"const res = pm.response;\r",
							"\r",
							"pm.test(\"Response code should be 200\", () => pm.expect(res.to.have.status(200)));\r",
							"pm.test(\"The response body should be 'someText'\", () => pm.expect(res.text()).to.equal(\"someText\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "xsl",
							"value": "<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" version=\"3.0\">\n    <xsl:output method=\"text\"/>   \n    <xsl:param name=\"myParam\"/>\n    <xsl:template name=\"xsl:initial-template\">\n      <xsl:value-of select=\"$myParam\"/>\n   </xsl:template>\n</xsl:stylesheet>\n",
							"type": "text"
						},
						{
							"key": "parameters",
							"value": "myParam=someText;otherParam=bla",
							"type": "text"
						},
						{
							"key": "output",
							"value": "method=text",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "https://{{url}}/transform",
					"host": [
						"{{url}}"
					],
					"path": [
						"transform"
					]
				}
			},
			"response": []
		},
		{
			"name": "JSON as input",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0bd8bcd2-e5a4-4678-bccf-9db53521b946",
						"exec": [
							"const res = pm.response;\r",
							"\r",
							"pm.test(\"Response code should be 200\", () => pm.expect(res.to.have.status(200)));\r",
							"pm.test(\"The response body should contain a JSON object\", () => pm.expect(res.json()).to.be.an(\"object\"));\r",
							"pm.test(\"The content-type should be application/json\", () => pm.expect(res.headers.get(\"Content-Type\")).to.include(\"application/json\"));\r",
							"pm.test(\"The response object should have key a with value b\", () => pm.expect(res.json()).to.deep.equal({\"a\": \"b\"}))\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "xsl",
							"value": "xml-to-json(.)",
							"type": "text"
						},
						{
							"key": "xml",
							"value": "{\"a\": \"b\"}",
							"type": "text"
						},
						{
							"key": "output",
							"value": "method=text;media-type=application/json",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/query",
					"host": [
						"{{url}}"
					],
					"path": [
						"query"
					]
				}
			},
			"response": []
		},
		{
			"name": "JSON as input XSLT",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3480fb2e-e6b0-485e-a405-8ce53f7a94d0",
						"exec": [
							"const res = pm.response;\r",
							"\r",
							"pm.test(\"Response code should be 200\", () => pm.expect(res.to.have.status(200)));\r",
							"pm.test(\"The response body should contain a JSON object\", () => pm.expect(res.json()).to.be.an(\"object\"));\r",
							"pm.test(\"The content-type should be application/json\", () => pm.expect(res.headers.get(\"Content-Type\")).to.include(\"application/json\"));\r",
							"pm.test(\"The response object should have key a with value b\", () => pm.expect(res.json()).to.deep.equal({\"a\": \"b\"}))\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "xsl",
							"value": "<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" version=\"3.0\">\n   <xsl:template match=\"/\"><xsl:sequence select=\"xml-to-json(.)\"/></xsl:template>\n</xsl:stylesheet>\n",
							"type": "text"
						},
						{
							"key": "xml",
							"value": "{\"a\": \"b\"}",
							"type": "text"
						},
						{
							"key": "output",
							"value": "method=text;media-type=application/json",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/transform",
					"host": [
						"{{url}}"
					],
					"path": [
						"transform"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "369d705b-292d-411c-92de-29f12ee23f3f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "2535e0ea-4e4c-4114-8e4c-24756ff685a6",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "25b91c52-31ed-4697-a881-a21879f078eb",
			"key": "url",
			"value": "localhost:5000"
		}
	],
	"protocolProfileBehavior": {}
}